// tslint:disable
/**
 * Octopus Energy
 * This is Rocketmakers implementation of the Octopus Energy API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@rocketmakers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Consumption
 */
export interface Consumption {
    /**
     * Results in Response
     * @type {number}
     * @memberof Consumption
     */
    count: number;
    /**
     * Paginated URL for next records
     * @type {string}
     * @memberof Consumption
     */
    next: string;
    /**
     * Paginated URL for previous records
     * @type {string}
     * @memberof Consumption
     */
    previous: string;
    /**
     * 
     * @type {Array<ConsumptionObject>}
     * @memberof Consumption
     */
    results: Array<ConsumptionObject>;
}
/**
 * 
 * @export
 * @interface ConsumptionObject
 */
export interface ConsumptionObject {
    /**
     * 
     * @type {number}
     * @memberof ConsumptionObject
     */
    consumption?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsumptionObject
     */
    interval_start?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsumptionObject
     */
    interval_end?: string;
}
/**
 * 
 * @export
 * @interface Industry
 */
export interface Industry {
    /**
     * Results in Response
     * @type {number}
     * @memberof Industry
     */
    count: number;
    /**
     * Paginated URL for next records
     * @type {string}
     * @memberof Industry
     */
    next: string;
    /**
     * Paginated URL for previous records
     * @type {string}
     * @memberof Industry
     */
    previous: string;
    /**
     * 
     * @type {Array<IndustryObject>}
     * @memberof Industry
     */
    results: Array<IndustryObject>;
}
/**
 * 
 * @export
 * @interface IndustryObject
 */
export interface IndustryObject {
    /**
     * 
     * @type {string}
     * @memberof IndustryObject
     */
    group_id?: string;
}
/**
 * 
 * @export
 * @interface ProductLinks
 */
export interface ProductLinks {
    /**
     * Link to single product
     * @type {string}
     * @memberof ProductLinks
     */
    href: string;
    /**
     * HTTP Method
     * @type {string}
     * @memberof ProductLinks
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLinks
     */
    rel: string;
}
/**
 * 
 * @export
 * @interface ProductObject
 */
export interface ProductObject {
    /**
     * Product Code
     * @type {string}
     * @memberof ProductObject
     */
    code: string;
    /**
     * Full name of product
     * @type {string}
     * @memberof ProductObject
     */
    full_name: string;
    /**
     * Display name of product
     * @type {string}
     * @memberof ProductObject
     */
    display_name: string;
    /**
     * Description of product
     * @type {string}
     * @memberof ProductObject
     */
    description: string;
    /**
     * Is the product Variable
     * @type {boolean}
     * @memberof ProductObject
     */
    is_variable: boolean;
    /**
     * Is the product Green
     * @type {boolean}
     * @memberof ProductObject
     */
    is_green: boolean;
    /**
     * Is the product Tracker
     * @type {boolean}
     * @memberof ProductObject
     */
    is_tracker: boolean;
    /**
     * Is the product Prepay
     * @type {boolean}
     * @memberof ProductObject
     */
    is_prepay: boolean;
    /**
     * Is the product is for Businesses
     * @type {boolean}
     * @memberof ProductObject
     */
    is_business: boolean;
    /**
     * Is the product Restricted
     * @type {boolean}
     * @memberof ProductObject
     */
    is_restricted: boolean;
    /**
     * Is the number of months that a product lasts for if it is fixed length
     * @type {number}
     * @memberof ProductObject
     */
    term: number;
    /**
     * Brand Name
     * @type {string}
     * @memberof ProductObject
     */
    brand: string;
    /**
     * Product available from
     * @type {string}
     * @memberof ProductObject
     */
    available_from: string;
    /**
     * Product available to
     * @type {string}
     * @memberof ProductObject
     */
    available_to: string;
    /**
     * 
     * @type {Array<ProductLinks>}
     * @memberof ProductObject
     */
    links: Array<ProductLinks>;
}
/**
 * 
 * @export
 * @interface ProductWithTariffsObject
 */
export interface ProductWithTariffsObject {
    /**
     * Product Code
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    code: string;
    /**
     * Full name of product
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    full_name: string;
    /**
     * Display name of product
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    display_name: string;
    /**
     * Description of product
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    description: string;
    /**
     * Is the product Variable
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_variable: boolean;
    /**
     * Is the product Green
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_green: boolean;
    /**
     * Is the product Tracker
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_tracker: boolean;
    /**
     * Is the product Prepay
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_prepay: boolean;
    /**
     * Is the product is for Businesses
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_business: boolean;
    /**
     * Is the product Restricted
     * @type {boolean}
     * @memberof ProductWithTariffsObject
     */
    is_restricted: boolean;
    /**
     * Is the number of months that a product lasts for if it is fixed length
     * @type {number}
     * @memberof ProductWithTariffsObject
     */
    term: number;
    /**
     * Brand Name
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    brand: string;
    /**
     * Product available from
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    available_from: string;
    /**
     * Product available to
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    available_to: string;
    /**
     * Tariff available at
     * @type {string}
     * @memberof ProductWithTariffsObject
     */
    tariffs_active_at?: string;
    /**
     * 
     * @type {SampleQuotes}
     * @memberof ProductWithTariffsObject
     */
    sample_quotes?: SampleQuotes;
    /**
     * 
     * @type {SingleRegisterElectricityTariffs}
     * @memberof ProductWithTariffsObject
     */
    single_register_electricity_tariffs?: SingleRegisterElectricityTariffs;
    /**
     * 
     * @type {SingleRegisterElectricityTariffs}
     * @memberof ProductWithTariffsObject
     */
    dual_register_electricity_tariffs?: SingleRegisterElectricityTariffs;
    /**
     * 
     * @type {SingleRegisterElectricityTariffs}
     * @memberof ProductWithTariffsObject
     */
    single_register_gas_tariffs?: SingleRegisterElectricityTariffs;
    /**
     * 
     * @type {SampleConsumption}
     * @memberof ProductWithTariffsObject
     */
    sample_consumption: SampleConsumption;
    /**
     * 
     * @type {Array<ProductLinks>}
     * @memberof ProductWithTariffsObject
     */
    links: Array<ProductLinks>;
}
/**
 * 
 * @export
 * @interface Products
 */
export interface Products {
    /**
     * Results in Response
     * @type {number}
     * @memberof Products
     */
    count: number;
    /**
     * Paginated URL for next records
     * @type {string}
     * @memberof Products
     */
    next: string;
    /**
     * Paginated URL for previous records
     * @type {string}
     * @memberof Products
     */
    previous: string;
    /**
     * 
     * @type {Array<ProductObject>}
     * @memberof Products
     */
    results: Array<ProductObject>;
}
/**
 * 
 * @export
 * @interface SampleConsumption
 */
export interface SampleConsumption {
    /**
     * 
     * @type {SampleConsumptionElectricitySingleRate}
     * @memberof SampleConsumption
     */
    electricity_single_rate: SampleConsumptionElectricitySingleRate;
    /**
     * 
     * @type {SampleConsumptionElectricityDualRate}
     * @memberof SampleConsumption
     */
    electricity_dual_rate: SampleConsumptionElectricityDualRate;
    /**
     * 
     * @type {SampleConsumptionDualFuelSingleRate}
     * @memberof SampleConsumption
     */
    dual_fuel_single_rate: SampleConsumptionDualFuelSingleRate;
    /**
     * 
     * @type {SampleConsumptionDualFuelDualRate}
     * @memberof SampleConsumption
     */
    dual_fuel_dual_rate: SampleConsumptionDualFuelDualRate;
}
/**
 * 
 * @export
 * @interface SampleConsumptionDualFuelDualRate
 */
export interface SampleConsumptionDualFuelDualRate {
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionDualFuelDualRate
     */
    electricity_day?: number;
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionDualFuelDualRate
     */
    electricity_night?: number;
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionDualFuelDualRate
     */
    gas_standard?: number;
}
/**
 * 
 * @export
 * @interface SampleConsumptionDualFuelSingleRate
 */
export interface SampleConsumptionDualFuelSingleRate {
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionDualFuelSingleRate
     */
    electricity_standard?: number;
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionDualFuelSingleRate
     */
    gas_standard?: number;
}
/**
 * 
 * @export
 * @interface SampleConsumptionElectricityDualRate
 */
export interface SampleConsumptionElectricityDualRate {
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionElectricityDualRate
     */
    electricity_day?: number;
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionElectricityDualRate
     */
    electricity_night?: number;
}
/**
 * 
 * @export
 * @interface SampleConsumptionElectricitySingleRate
 */
export interface SampleConsumptionElectricitySingleRate {
    /**
     * 
     * @type {number}
     * @memberof SampleConsumptionElectricitySingleRate
     */
    electricity_standard?: number;
}
/**
 * 
 * @export
 * @interface SampleQuotes
 */
export interface SampleQuotes {
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _A?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _B?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _C?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _D?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _E?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _F?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _G?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _H?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _I?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _J?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _K?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _L?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _M?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _N?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _O?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _P?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _Q?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _R?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _S?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _T?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _U?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _V?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _W?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _X?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _Y?: SampleQuotesObject;
    /**
     * 
     * @type {SampleQuotesObject}
     * @memberof SampleQuotes
     */
    _Z?: SampleQuotesObject;
}
/**
 * 
 * @export
 * @interface SampleQuotesAnnualCosts
 */
export interface SampleQuotesAnnualCosts {
    /**
     * The keys annual_cost_* are listed in p (pence).
     * @type {number}
     * @memberof SampleQuotesAnnualCosts
     */
    annual_cost_inc_vat?: number;
    /**
     * The keys annual_cost_* are listed in p (pence).
     * @type {number}
     * @memberof SampleQuotesAnnualCosts
     */
    annual_cost_exc_vat?: number;
}
/**
 * 
 * @export
 * @interface SampleQuotesObject
 */
export interface SampleQuotesObject {
    /**
     * 
     * @type {SampleQuotesRates}
     * @memberof SampleQuotesObject
     */
    direct_debit_monthly?: SampleQuotesRates;
    /**
     * 
     * @type {SampleQuotesRates}
     * @memberof SampleQuotesObject
     */
    direct_debit_quarterly?: SampleQuotesRates;
}
/**
 * 
 * @export
 * @interface SampleQuotesRates
 */
export interface SampleQuotesRates {
    /**
     * 
     * @type {SampleQuotesAnnualCosts}
     * @memberof SampleQuotesRates
     */
    electricity_single_rate?: SampleQuotesAnnualCosts;
    /**
     * 
     * @type {SampleQuotesAnnualCosts}
     * @memberof SampleQuotesRates
     */
    electricity_dual_rate?: SampleQuotesAnnualCosts;
    /**
     * 
     * @type {SampleQuotesAnnualCosts}
     * @memberof SampleQuotesRates
     */
    dual_fuel_single_rate?: SampleQuotesAnnualCosts;
    /**
     * 
     * @type {SampleQuotesAnnualCosts}
     * @memberof SampleQuotesRates
     */
    dual_fuel_dual_rate?: SampleQuotesAnnualCosts;
}
/**
 * 
 * @export
 * @interface SingleRegisterElectricityTariffs
 */
export interface SingleRegisterElectricityTariffs {
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _A?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _B?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _C?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _D?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _E?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _F?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _G?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _H?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _I?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _J?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _K?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _L?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _M?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _N?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _O?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _P?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _Q?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _R?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _S?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _T?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _U?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _V?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _W?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _X?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _Y?: SingleRegisterElectricityTariffsObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsObject}
     * @memberof SingleRegisterElectricityTariffs
     */
    _Z?: SingleRegisterElectricityTariffsObject;
}
/**
 * 
 * @export
 * @interface SingleRegisterElectricityTariffsDirectDebitObject
 */
export interface SingleRegisterElectricityTariffsDirectDebitObject {
    /**
     * 
     * @type {string}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    code?: string;
    /**
     * The keys standard_unit_rate_* are listed in p/kWh (pence per kilowatt hour).
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    standard_unit_rate_exc_vat?: number;
    /**
     * The keys standard_unit_rate_* are listed in p/kWh (pence per kilowatt hour).
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    standard_unit_rate_inc_vat?: number;
    /**
     * The keys standing_charge_* are listed in p/day (pence per day).
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    standing_charge_exc_vat?: number;
    /**
     * The keys standing_charge_* are listed in p/day (pence per day).
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    standing_charge_inc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    online_discount_exc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    online_discount_inc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    dual_fuel_discount_exc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    dual_fuel_discount_inc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    exit_fees_exc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    exit_fees_inc_vat?: number;
    /**
     * 
     * @type {Array<ProductLinks>}
     * @memberof SingleRegisterElectricityTariffsDirectDebitObject
     */
    links?: Array<ProductLinks>;
}
/**
 * 
 * @export
 * @interface SingleRegisterElectricityTariffsObject
 */
export interface SingleRegisterElectricityTariffsObject {
    /**
     * 
     * @type {SingleRegisterElectricityTariffsDirectDebitObject}
     * @memberof SingleRegisterElectricityTariffsObject
     */
    direct_debit_monthly?: SingleRegisterElectricityTariffsDirectDebitObject;
    /**
     * 
     * @type {SingleRegisterElectricityTariffsDirectDebitObject}
     * @memberof SingleRegisterElectricityTariffsObject
     */
    direct_debit_quarterly?: SingleRegisterElectricityTariffsDirectDebitObject;
}
/**
 * 
 * @export
 * @interface TariffCharges
 */
export interface TariffCharges {
    /**
     * Results in Response
     * @type {number}
     * @memberof TariffCharges
     */
    count: number;
    /**
     * Paginated URL for next records
     * @type {string}
     * @memberof TariffCharges
     */
    next: string;
    /**
     * Paginated URL for previous records
     * @type {string}
     * @memberof TariffCharges
     */
    previous: string;
    /**
     * 
     * @type {Array<TariffChargesObject>}
     * @memberof TariffCharges
     */
    results: Array<TariffChargesObject>;
}
/**
 * 
 * @export
 * @interface TariffChargesObject
 */
export interface TariffChargesObject {
    /**
     * 
     * @type {number}
     * @memberof TariffChargesObject
     */
    value_exc_vat?: number;
    /**
     * 
     * @type {number}
     * @memberof TariffChargesObject
     */
    value_inc_vat?: number;
    /**
     * 
     * @type {string}
     * @memberof TariffChargesObject
     */
    valid_from?: string;
    /**
     * 
     * @type {string}
     * @memberof TariffChargesObject
     */
    valid_to?: string;
}

/**
 * ConsumptionApi - axios parameter creator
 * @export
 */
export const ConsumptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityMeterConsumption: async (mpan: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mpan' is not null or undefined
            if (mpan === null || mpan === undefined) {
                throw new RequiredError('mpan','Required parameter mpan was null or undefined when calling getElectricityMeterConsumption.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getElectricityMeterConsumption.');
            }
            const localVarPath = `/electricity-meter-points/{mpan}/meters/{serial_number}/consumption/`
                .replace(`{${"mpan"}}`, encodeURIComponent(String(mpan)))
                .replace(`{${"serial_number"}}`, encodeURIComponent(String(serialNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mprn The gas meter-point’s M.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMeterConsumption: async (mprn: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mprn' is not null or undefined
            if (mprn === null || mprn === undefined) {
                throw new RequiredError('mprn','Required parameter mprn was null or undefined when calling getGasMeterConsumption.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getGasMeterConsumption.');
            }
            const localVarPath = `/gas-meter-points/{mprn}/meters/{serial_number}/consumption/`
                .replace(`{${"mprn"}}`, encodeURIComponent(String(mprn)))
                .replace(`{${"serial_number"}}`, encodeURIComponent(String(serialNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsumptionApi - functional programming interface
 * @export
 */
export const ConsumptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityMeterConsumption(mpan: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Consumption>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).getElectricityMeterConsumption(mpan, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mprn The gas meter-point’s M.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGasMeterConsumption(mprn: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Consumption>> {
            const localVarAxiosArgs = await ConsumptionApiAxiosParamCreator(configuration).getGasMeterConsumption(mprn, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConsumptionApi - factory interface
 * @export
 */
export const ConsumptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityMeterConsumption(mpan: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): AxiosPromise<Consumption> {
            return ConsumptionApiFp(configuration).getElectricityMeterConsumption(mpan, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
         * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
         * @param {string} mprn The gas meter-point’s M.
         * @param {string} serialNumber The electricity meter-point’s serial number.
         * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
         * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
         * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMeterConsumption(mprn: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): AxiosPromise<Consumption> {
            return ConsumptionApiFp(configuration).getGasMeterConsumption(mprn, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsumptionApi - interface
 * @export
 * @interface ConsumptionApi
 */
export interface ConsumptionApiInterface {
    /**
     * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
     * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
     * @param {string} mpan The electricity meter-point’s MPAN.
     * @param {string} serialNumber The electricity meter-point’s serial number.
     * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
     * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
     * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApiInterface
     */
    getElectricityMeterConsumption(mpan: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): AxiosPromise<Consumption>;

    /**
     * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
     * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
     * @param {string} mprn The gas meter-point’s M.
     * @param {string} serialNumber The electricity meter-point’s serial number.
     * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
     * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
     * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApiInterface
     */
    getGasMeterConsumption(mprn: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any): AxiosPromise<Consumption>;

}

/**
 * ConsumptionApi - object-oriented interface
 * @export
 * @class ConsumptionApi
 * @extends {BaseAPI}
 */
export class ConsumptionApi extends BaseAPI implements ConsumptionApiInterface {
    /**
     * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
     * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
     * @param {string} mpan The electricity meter-point’s MPAN.
     * @param {string} serialNumber The electricity meter-point’s serial number.
     * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
     * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
     * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public getElectricityMeterConsumption(mpan: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any) {
        return ConsumptionApiFp(this.configuration).getElectricityMeterConsumption(mpan, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of consumption values for half-hour periods for a given meter-point and meter. Electricity meters: kWh SMETS1 Secure gas meters: kWh SMETS2 gas meters: m^3
     * @summary Return a list of consumption values for half-hour periods for a given meter-point and meter.
     * @param {string} mprn The gas meter-point’s M.
     * @param {string} serialNumber The electricity meter-point’s serial number.
     * @param {string} [periodFrom] Show consumption from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details.
     * @param {string} [orderBy] Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
     * @param {string} [groupBy] Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumptionApi
     */
    public getGasMeterConsumption(mprn: string, serialNumber: string, periodFrom?: string, periodTo?: string, pageSize?: number, orderBy?: string, groupBy?: string, options?: any) {
        return ConsumptionApiFp(this.configuration).getGasMeterConsumption(mprn, serialNumber, periodFrom, periodTo, pageSize, orderBy, groupBy, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ElectricityMeterPointsApi - axios parameter creator
 * @export
 */
export const ElectricityMeterPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint can be used to get the GSP of a given meter-point.
         * @summary Retrieve the details of a meter-point.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityMeterPoints: async (mpan: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mpan' is not null or undefined
            if (mpan === null || mpan === undefined) {
                throw new RequiredError('mpan','Required parameter mpan was null or undefined when calling getElectricityMeterPoints.');
            }
            const localVarPath = `/electricity-meter-points/{mpan}/`
                .replace(`{${"mpan"}}`, encodeURIComponent(String(mpan)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElectricityMeterPointsApi - functional programming interface
 * @export
 */
export const ElectricityMeterPointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint can be used to get the GSP of a given meter-point.
         * @summary Retrieve the details of a meter-point.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityMeterPoints(mpan: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ElectricityMeterPointsApiAxiosParamCreator(configuration).getElectricityMeterPoints(mpan, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ElectricityMeterPointsApi - factory interface
 * @export
 */
export const ElectricityMeterPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint can be used to get the GSP of a given meter-point.
         * @summary Retrieve the details of a meter-point.
         * @param {string} mpan The electricity meter-point’s MPAN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityMeterPoints(mpan: string, options?: any): AxiosPromise<object> {
            return ElectricityMeterPointsApiFp(configuration).getElectricityMeterPoints(mpan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElectricityMeterPointsApi - interface
 * @export
 * @interface ElectricityMeterPointsApi
 */
export interface ElectricityMeterPointsApiInterface {
    /**
     * This endpoint can be used to get the GSP of a given meter-point.
     * @summary Retrieve the details of a meter-point.
     * @param {string} mpan The electricity meter-point’s MPAN.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElectricityMeterPointsApiInterface
     */
    getElectricityMeterPoints(mpan: string, options?: any): AxiosPromise<object>;

}

/**
 * ElectricityMeterPointsApi - object-oriented interface
 * @export
 * @class ElectricityMeterPointsApi
 * @extends {BaseAPI}
 */
export class ElectricityMeterPointsApi extends BaseAPI implements ElectricityMeterPointsApiInterface {
    /**
     * This endpoint can be used to get the GSP of a given meter-point.
     * @summary Retrieve the details of a meter-point.
     * @param {string} mpan The electricity meter-point’s MPAN.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElectricityMeterPointsApi
     */
    public getElectricityMeterPoints(mpan: string, options?: any) {
        return ElectricityMeterPointsApiFp(this.configuration).getElectricityMeterPoints(mpan, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * EnergyProductsApi - axios parameter creator
 * @export
 */
export const EnergyProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsDayUnitRates: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getElectricityTariffsDayUnitRates.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getElectricityTariffsDayUnitRates.');
            }
            const localVarPath = `/products/{product_code}/electricity-tariffs/{tariff_code}/day-unit-rates/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsNightUnitRates: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getElectricityTariffsNightUnitRates.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getElectricityTariffsNightUnitRates.');
            }
            const localVarPath = `/products/{product_code}/electricity-tariffs/{tariff_code}/night-unit-rates/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsStandardCharges: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getElectricityTariffsStandardCharges.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getElectricityTariffsStandardCharges.');
            }
            const localVarPath = `/products/{product_code}/electricity-tariffs/{tariff_code}/standing-charges/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsStandardUnitRates: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getElectricityTariffsStandardUnitRates.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getElectricityTariffsStandardUnitRates.');
            }
            const localVarPath = `/products/{product_code}/electricity-tariffs/{tariff_code}/standard-unit-rates/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @summary Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} [tariffsActiveAt] The point in time in which to show the active charges. Defaults to current datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnergyProductByCode: async (productCode: string, tariffsActiveAt?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getEnergyProductByCode.');
            }
            const localVarPath = `/products/{product_code}`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tariffsActiveAt !== undefined) {
                localVarQueryParameter['tariffs_active_at'] = tariffsActiveAt;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnergyProducts: async (isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isVariable !== undefined) {
                localVarQueryParameter['is_variable'] = isVariable;
            }

            if (isGreen !== undefined) {
                localVarQueryParameter['is_green'] = isGreen;
            }

            if (isPrepay !== undefined) {
                localVarQueryParameter['is_prepay'] = isPrepay;
            }

            if (isBusiness !== undefined) {
                localVarQueryParameter['is_business'] = isBusiness;
            }

            if (availableAt !== undefined) {
                localVarQueryParameter['available_at'] = availableAt;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasTariffsStandardCharges: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getGasTariffsStandardCharges.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getGasTariffsStandardCharges.');
            }
            const localVarPath = `/products/{product_code}/gas-tariffs/{tariff_code}/standing-charges/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasTariffsStandardUnitRates: async (productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            if (productCode === null || productCode === undefined) {
                throw new RequiredError('productCode','Required parameter productCode was null or undefined when calling getGasTariffsStandardUnitRates.');
            }
            // verify required parameter 'tariffCode' is not null or undefined
            if (tariffCode === null || tariffCode === undefined) {
                throw new RequiredError('tariffCode','Required parameter tariffCode was null or undefined when calling getGasTariffsStandardUnitRates.');
            }
            const localVarPath = `/products/{product_code}/gas-tariffs/{tariff_code}/standard-unit-rates/`
                .replace(`{${"product_code"}}`, encodeURIComponent(String(productCode)))
                .replace(`{${"tariff_code"}}`, encodeURIComponent(String(tariffCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodFrom !== undefined) {
                localVarQueryParameter['period_from'] = periodFrom;
            }

            if (periodTo !== undefined) {
                localVarQueryParameter['period_to'] = periodTo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnergyProductsApi - functional programming interface
 * @export
 */
export const EnergyProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityTariffsDayUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getElectricityTariffsDayUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityTariffsNightUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getElectricityTariffsNightUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getElectricityTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElectricityTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getElectricityTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @summary Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} [tariffsActiveAt] The point in time in which to show the active charges. Defaults to current datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnergyProductByCode(productCode: string, tariffsActiveAt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductWithTariffsObject>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getEnergyProductByCode(productCode, tariffsActiveAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnergyProducts(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getEnergyProducts(isVariable, isGreen, isPrepay, isBusiness, availableAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGasTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getGasTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGasTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TariffCharges>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).getGasTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnergyProductsApi - factory interface
 * @export
 */
export const EnergyProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsDayUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getElectricityTariffsDayUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsNightUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getElectricityTariffsNightUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getElectricityTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElectricityTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getElectricityTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @summary Retrieve the details of a product (including all its tariffs) for a particular point in time.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} [tariffsActiveAt] The point in time in which to show the active charges. Defaults to current datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnergyProductByCode(productCode: string, tariffsActiveAt?: string, options?: any): AxiosPromise<ProductWithTariffsObject> {
            return EnergyProductsApiFp(configuration).getEnergyProductByCode(productCode, tariffsActiveAt, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnergyProducts(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): AxiosPromise<Products> {
            return EnergyProductsApiFp(configuration).getEnergyProducts(isVariable, isGreen, isPrepay, isBusiness, availableAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getGasTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of unit rates and standing charges.
         * @summary Return a list of unit rates and standing charges.
         * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
         * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
         * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
         * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
         * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges> {
            return EnergyProductsApiFp(configuration).getGasTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnergyProductsApi - interface
 * @export
 * @interface EnergyProductsApi
 */
export interface EnergyProductsApiInterface {
    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getElectricityTariffsDayUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getElectricityTariffsNightUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getElectricityTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getElectricityTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

    /**
     * Retrieve the details of a product (including all its tariffs) for a particular point in time.
     * @summary Retrieve the details of a product (including all its tariffs) for a particular point in time.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} [tariffsActiveAt] The point in time in which to show the active charges. Defaults to current datetime.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getEnergyProductByCode(productCode: string, tariffsActiveAt?: string, options?: any): AxiosPromise<ProductWithTariffsObject>;

    /**
     * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
     * @summary Return a list of energy products.
     * @param {boolean} [isVariable] Show only variable products.
     * @param {boolean} [isGreen] Show only green products.
     * @param {boolean} [isPrepay] Show only tracker products.
     * @param {boolean} [isBusiness] Show only business products.
     * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getEnergyProducts(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): AxiosPromise<Products>;

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getGasTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    getGasTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any): AxiosPromise<TariffCharges>;

}

/**
 * EnergyProductsApi - object-oriented interface
 * @export
 * @class EnergyProductsApi
 * @extends {BaseAPI}
 */
export class EnergyProductsApi extends BaseAPI implements EnergyProductsApiInterface {
    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getElectricityTariffsDayUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getElectricityTariffsDayUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getElectricityTariffsNightUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getElectricityTariffsNightUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getElectricityTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getElectricityTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getElectricityTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getElectricityTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of a product (including all its tariffs) for a particular point in time.
     * @summary Retrieve the details of a product (including all its tariffs) for a particular point in time.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} [tariffsActiveAt] The point in time in which to show the active charges. Defaults to current datetime.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getEnergyProductByCode(productCode: string, tariffsActiveAt?: string, options?: any) {
        return EnergyProductsApiFp(this.configuration).getEnergyProductByCode(productCode, tariffsActiveAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
     * @summary Return a list of energy products.
     * @param {boolean} [isVariable] Show only variable products.
     * @param {boolean} [isGreen] Show only green products.
     * @param {boolean} [isPrepay] Show only tracker products.
     * @param {boolean} [isBusiness] Show only business products.
     * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getEnergyProducts(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any) {
        return EnergyProductsApiFp(this.configuration).getEnergyProducts(isVariable, isGreen, isPrepay, isBusiness, availableAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getGasTariffsStandardCharges(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getGasTariffsStandardCharges(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of unit rates and standing charges.
     * @summary Return a list of unit rates and standing charges.
     * @param {string} productCode The code of the product to be retrieved, for example VAR-17-01-11
     * @param {string} tariffCode The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A.
     * @param {string} [periodFrom] Show charges active from the given datetime (inclusive). This parameter can be provided on its own.
     * @param {string} [periodTo] Show charges active up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.
     * @param {number} [pageSize] Page size of returned results. Default is 100, maximum is 1,500 to give up to a month of half-hourly prices.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public getGasTariffsStandardUnitRates(productCode: string, tariffCode: string, periodFrom?: string, periodTo?: string, pageSize?: number, options?: any) {
        return EnergyProductsApiFp(this.configuration).getGasTariffsStandardUnitRates(productCode, tariffCode, periodFrom, periodTo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * IndustryApi - axios parameter creator
 * @export
 */
export const IndustryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of GSP objects, optionally filtered by postcode:
         * @summary Return a list of GSP objects, optionally filtered by postcode:
         * @param {string} [postcode] A postcode to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGridSupplyPoints: async (postcode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industry/grid-supply-points/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndustryApi - functional programming interface
 * @export
 */
export const IndustryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return a list of GSP objects, optionally filtered by postcode:
         * @summary Return a list of GSP objects, optionally filtered by postcode:
         * @param {string} [postcode] A postcode to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGridSupplyPoints(postcode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await IndustryApiAxiosParamCreator(configuration).getGridSupplyPoints(postcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IndustryApi - factory interface
 * @export
 */
export const IndustryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return a list of GSP objects, optionally filtered by postcode:
         * @summary Return a list of GSP objects, optionally filtered by postcode:
         * @param {string} [postcode] A postcode to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGridSupplyPoints(postcode?: string, options?: any): AxiosPromise<object> {
            return IndustryApiFp(configuration).getGridSupplyPoints(postcode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndustryApi - interface
 * @export
 * @interface IndustryApi
 */
export interface IndustryApiInterface {
    /**
     * Return a list of GSP objects, optionally filtered by postcode:
     * @summary Return a list of GSP objects, optionally filtered by postcode:
     * @param {string} [postcode] A postcode to filter on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryApiInterface
     */
    getGridSupplyPoints(postcode?: string, options?: any): AxiosPromise<object>;

}

/**
 * IndustryApi - object-oriented interface
 * @export
 * @class IndustryApi
 * @extends {BaseAPI}
 */
export class IndustryApi extends BaseAPI implements IndustryApiInterface {
    /**
     * Return a list of GSP objects, optionally filtered by postcode:
     * @summary Return a list of GSP objects, optionally filtered by postcode:
     * @param {string} [postcode] A postcode to filter on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryApi
     */
    public getGridSupplyPoints(postcode?: string, options?: any) {
        return IndustryApiFp(this.configuration).getGridSupplyPoints(postcode, options).then((request) => request(this.axios, this.basePath));
    }

}


