// tslint:disable
/**
 * Octopus Energy
 * This is Rocketmakers implementation of the Octopus Energy API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@rocketmakers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ProductLinks
 */
export interface ProductLinks {
    /**
     * Link to single product
     * @type {string}
     * @memberof ProductLinks
     */
    href: string;
    /**
     * HTTP Method
     * @type {string}
     * @memberof ProductLinks
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof ProductLinks
     */
    rel: string;
}
/**
 * 
 * @export
 * @interface ProductObject
 */
export interface ProductObject {
    /**
     * Product Code
     * @type {string}
     * @memberof ProductObject
     */
    code: string;
    /**
     * Full name of product
     * @type {string}
     * @memberof ProductObject
     */
    full_name: string;
    /**
     * Display name of product
     * @type {string}
     * @memberof ProductObject
     */
    display_name: string;
    /**
     * Description of product
     * @type {string}
     * @memberof ProductObject
     */
    description: string;
    /**
     * Is the product Variable
     * @type {boolean}
     * @memberof ProductObject
     */
    is_variable: boolean;
    /**
     * Is the product Green
     * @type {boolean}
     * @memberof ProductObject
     */
    is_green: boolean;
    /**
     * Is the product Tracker
     * @type {boolean}
     * @memberof ProductObject
     */
    is_tracker: boolean;
    /**
     * Is the product Prepay
     * @type {boolean}
     * @memberof ProductObject
     */
    is_prepay: boolean;
    /**
     * Is the product is for Businesses
     * @type {boolean}
     * @memberof ProductObject
     */
    is_business: boolean;
    /**
     * Is the product Restricted
     * @type {boolean}
     * @memberof ProductObject
     */
    is_restricted: boolean;
    /**
     * Is the number of months that a product lasts for if it is fixed length
     * @type {number}
     * @memberof ProductObject
     */
    term: number;
    /**
     * Brand Name
     * @type {string}
     * @memberof ProductObject
     */
    brand: string;
    /**
     * Product available from
     * @type {string}
     * @memberof ProductObject
     */
    available_from: string;
    /**
     * Product available to
     * @type {string}
     * @memberof ProductObject
     */
    available_to: string;
    /**
     * 
     * @type {Array<ProductLinks>}
     * @memberof ProductObject
     */
    links: Array<ProductLinks>;
}
/**
 * 
 * @export
 * @interface Products
 */
export interface Products {
    /**
     * Results in Response
     * @type {number}
     * @memberof Products
     */
    count: number;
    /**
     * Paginated URL for next records
     * @type {string}
     * @memberof Products
     */
    next: string;
    /**
     * Paginated URL for previous records
     * @type {string}
     * @memberof Products
     */
    previous: string;
    /**
     * 
     * @type {Array<ProductObject>}
     * @memberof Products
     */
    results: Array<ProductObject>;
}

/**
 * EnergyProductsApi - axios parameter creator
 * @export
 */
export const EnergyProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet: async (isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isVariable !== undefined) {
                localVarQueryParameter['is_variable'] = isVariable;
            }

            if (isGreen !== undefined) {
                localVarQueryParameter['is_green'] = isGreen;
            }

            if (isPrepay !== undefined) {
                localVarQueryParameter['is_prepay'] = isPrepay;
            }

            if (isBusiness !== undefined) {
                localVarQueryParameter['is_business'] = isBusiness;
            }

            if (availableAt !== undefined) {
                localVarQueryParameter['available_at'] = availableAt;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnergyProductsApi - functional programming interface
 * @export
 */
export const EnergyProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsGet(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await EnergyProductsApiAxiosParamCreator(configuration).productsGet(isVariable, isGreen, isPrepay, isBusiness, availableAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnergyProductsApi - factory interface
 * @export
 */
export const EnergyProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
         * @summary Return a list of energy products.
         * @param {boolean} [isVariable] Show only variable products.
         * @param {boolean} [isGreen] Show only green products.
         * @param {boolean} [isPrepay] Show only tracker products.
         * @param {boolean} [isBusiness] Show only business products.
         * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): AxiosPromise<Products> {
            return EnergyProductsApiFp(configuration).productsGet(isVariable, isGreen, isPrepay, isBusiness, availableAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnergyProductsApi - interface
 * @export
 * @interface EnergyProductsApi
 */
export interface EnergyProductsApiInterface {
    /**
     * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
     * @summary Return a list of energy products.
     * @param {boolean} [isVariable] Show only variable products.
     * @param {boolean} [isGreen] Show only green products.
     * @param {boolean} [isPrepay] Show only tracker products.
     * @param {boolean} [isBusiness] Show only business products.
     * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApiInterface
     */
    productsGet(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any): AxiosPromise<Products>;

}

/**
 * EnergyProductsApi - object-oriented interface
 * @export
 * @class EnergyProductsApi
 * @extends {BaseAPI}
 */
export class EnergyProductsApi extends BaseAPI implements EnergyProductsApiInterface {
    /**
     * By default, results will be public energy products but if the authenticated organisations will also see products available to their organisation.
     * @summary Return a list of energy products.
     * @param {boolean} [isVariable] Show only variable products.
     * @param {boolean} [isGreen] Show only green products.
     * @param {boolean} [isPrepay] Show only tracker products.
     * @param {boolean} [isBusiness] Show only business products.
     * @param {string} [availableAt] Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnergyProductsApi
     */
    public productsGet(isVariable?: boolean, isGreen?: boolean, isPrepay?: boolean, isBusiness?: boolean, availableAt?: string, options?: any) {
        return EnergyProductsApiFp(this.configuration).productsGet(isVariable, isGreen, isPrepay, isBusiness, availableAt, options).then((request) => request(this.axios, this.basePath));
    }

}


